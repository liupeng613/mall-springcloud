server:
  port: 80
  tomcat:
    accept-count: 1000  #tomcat接受排队的最大数量
    max-threads: 1000 #tomcat工作线程数量
    max-connections: 2000 #tomcat处理的最大连接数
eureka:
  client:
    service-url:
      defaultZone: http://xiaogj:xiaogj@local056.xiaogj.com:8761/eureka
  instance:
    instance-id: gateway
    prefer-ip-address: true
spring:
  application:
    name:  gateway
  sleuth:
    sampler:
      probability: 1  #采样频率
  zipkin:
    base-url: http://local056.xiaogj.com:9411/
    service:
      name: gateway
    sender:
      type: web
  cache:
    type: REDIS
    redis:
      timeToLive: 200000 #缓存超时时间ms
      cache-null-values: true #是否缓存空值
  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    host: local059.xiaogj.com
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password: xiaogj2020
    jedis:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: 8
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: -1
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池中的最小空闲连接
        min-idle: 1
        # 连接超时时间（毫秒）
        timeout: 0
security:
  basic:
    enabled: false
  oauth2:
    sso:
      login-path: /login
    client:
      access-token-uri: http://authserver:8290/oauth/token #令牌端点
      user-authorization-uri: http://authserver:8290/oauth/authorize #授权端点
      client-id: zuul #OAuth2客户端ID
      client-secret: zuul_123 #OAuth2客户端密钥
    resource:
      #token-info-uri: http://authserver:8290/oauth/authorize
      jwt:
        #key-store: xiaogj-jwt.jks
        #key-store-password: xiaogj123
        #key-alias: xiaogj-jwt
        key-value: xiaogj123 #使用对称加密方式，默认算法为HS256

logging:
  config: classpath:logback.xml
  path: /data/logs/${spring.application.name}
  level:
    root: INFO
    org.springframework.web.servlet.DispatcherServlet: INFO
    org.springframework.cloud.sleuth: INFO
zuul:
  ignored-services: "*"
  routes:
    pocstudent-route:
      service-id: pocstudent
      path: /pocstudent/**              # service-id对应的路径
    pocpoint-route:
      service-id: pocpoint
      path: /pocpoint/**              # service-id对应的路径
    pocaccount-route:
      service-id: pocaccount
      path: /pocaccount/**              # service-id对应的路径
  semaphore:
    max-semaphores: 500 # 并发处理数，值越大越好，但到到达一个临界点之后，就不会提高响应速度了
  host:
    socket-timeout-millis: 30000 # socket超时时间，如果使用service-id方式是不用配置的
    connect-timeout-millis: 30000 # 连接时间semaphores
    max-total-connections: 5000  # 最大连接数，值越大越好，但到到达一个临界点之后，就不会提高响应速度了
    max-per-route-connections: 5 # 每个router最大连接数，降低请求时间，越小越好，但达到一定层级就没用了
  # 添加代理头
  add-proxy-headers: true
  # 敏感头信息（重要）
  sensitive-headers: [Cookie, Set-Cookie]

feign:
  hystrix: #开启feign支持hystrix
    enabled: true

hystrix:
  threadpool:
    default:
      coreSize: 200 #并发执行的最大线程数，默认10
      maxQueueSize: 200 #BlockingQueue的最大队列数
      queueSizeRejectionThreshold: 50 #即使maxQueueSize没有达到，达到queueSizeRejectionThreshold该值后，请求也会被拒绝
  command:
    default:
      execution:
        isolation:
          strategy: THREAD
          thread:
            timeoutInMilliseconds: 60000
ribbon:
  ReadTimeout: 30000 # 处理时间
  SocketTimeout: 20000
  ConnectTimeout: 30000 # 连接时间
  PoolMaxThreads: 1000 #ribbon的最大工作线程数
  MaxAutoRetries: 0 #最大自动重试次数
  MaxAutoRetriesNextServer: 1 # 换实例重试次数
  MaxTotalHttpConnections: 2000 # 最大http连接数，越大越好，但到到达一个临界点之后，就不会提高响应速度了
  MaxConnectionsPerHost: 1000 # 每个host连接数
  eager-load:
    enabled: true # 强制加载，不设置会进行懒加载。spring 第一次请求会非常慢
    clients: pocstudent, pocpoint, pocaccount
  eureka:
    enabled: true
